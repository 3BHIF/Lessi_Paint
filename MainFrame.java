 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package formen;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JRadioButtonMenuItem;
import javax.xml.bind.JAXBException;

/**
 *
 * @author wochi
 */
public class MainFrame extends javax.swing.JFrame {
    private ShapeEnum selectedForm = null;
    private LinkedList<Point> clicked = new LinkedList<>();
    private File file;
    private Color color = Color.BLACK;
    private int lineSize = 1;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorButtongroup = new javax.swing.ButtonGroup();
        lineWidthButtongroup = new javax.swing.ButtonGroup();
        infoDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        shapePanel = new formen.ShapePanel();
        MenuBar = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        saveAs = new javax.swing.JMenuItem();
        clear = new javax.swing.JMenu();
        colors = new javax.swing.JMenu();
        lineWidth = new javax.swing.JMenu();
        shapes = new javax.swing.JMenu();
        rectangle = new javax.swing.JMenuItem();
        sqare = new javax.swing.JMenuItem();
        rhombus = new javax.swing.JMenuItem();
        trapeze = new javax.swing.JMenuItem();
        polygon = new javax.swing.JMenuItem();
        triangle = new javax.swing.JMenuItem();
        hexagon = new javax.swing.JMenuItem();
        star = new javax.swing.JMenuItem();
        circle = new javax.swing.JMenuItem();
        oval = new javax.swing.JMenuItem();
        info = new javax.swing.JMenu();

        infoDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        infoDialog.setTitle("Info");
        infoDialog.setLocationByPlatform(true);
        infoDialog.setMinimumSize(new java.awt.Dimension(500, 150));
        infoDialog.setModal(true);
        infoDialog.setName("infoDialog"); // NOI18N
        infoDialog.setPreferredSize(new java.awt.Dimension(300, 400));
        infoDialog.setResizable(false);

        jLabel1.setText("Hello, heres Lessi! This is a short explanation of this program");

        jLabel2.setText("File: Open and Save drawings in XML files");

        jLabel3.setText("Clear: Clears the drawing area");

        jLabel4.setText("Color: Select a color");

        jLabel5.setText("Line Width: Select Line WIdth");

        jLabel6.setText("Shapes: Select some shapes to draw");

        javax.swing.GroupLayout infoDialogLayout = new javax.swing.GroupLayout(infoDialog.getContentPane());
        infoDialog.getContentPane().setLayout(infoDialogLayout);
        infoDialogLayout.setHorizontalGroup(
            infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        infoDialogLayout.setVerticalGroup(
            infoDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(162, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        shapePanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                shapePanelMouseMoved(evt);
            }
        });
        shapePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shapePanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout shapePanelLayout = new javax.swing.GroupLayout(shapePanel);
        shapePanel.setLayout(shapePanelLayout);
        shapePanelLayout.setHorizontalGroup(
            shapePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 779, Short.MAX_VALUE)
        );
        shapePanelLayout.setVerticalGroup(
            shapePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 437, Short.MAX_VALUE)
        );

        File.setText("File");

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        File.add(open);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Save File");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        File.add(saveFile);

        saveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAs.setText("Save As");
        saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsActionPerformed(evt);
            }
        });
        File.add(saveAs);

        MenuBar.add(File);

        clear.setText("Clear");
        clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearMouseClicked(evt);
            }
        });
        MenuBar.add(clear);

        colors.setText("Color");
        MenuBar.add(colors);

        lineWidth.setText("Line Width");
        MenuBar.add(lineWidth);

        shapes.setText("Shapes");

        rectangle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rectangle.setText("Rectangle");
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });
        shapes.add(rectangle);

        sqare.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        sqare.setText("Square");
        sqare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqareActionPerformed(evt);
            }
        });
        shapes.add(sqare);

        rhombus.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        rhombus.setText("Rhombus");
        rhombus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rhombusActionPerformed(evt);
            }
        });
        shapes.add(rhombus);

        trapeze.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        trapeze.setText("Trapeze");
        trapeze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trapezeActionPerformed(evt);
            }
        });
        shapes.add(trapeze);

        polygon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        polygon.setText("Polygon");
        polygon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                polygonActionPerformed(evt);
            }
        });
        shapes.add(polygon);

        triangle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        triangle.setText("Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleActionPerformed(evt);
            }
        });
        shapes.add(triangle);

        hexagon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.CTRL_MASK));
        hexagon.setText("Hexagon");
        hexagon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexagonActionPerformed(evt);
            }
        });
        shapes.add(hexagon);

        star.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PLUS, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        star.setText("Star");
        star.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starActionPerformed(evt);
            }
        });
        shapes.add(star);

        circle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        circle.setText("Circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });
        shapes.add(circle);

        oval.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        oval.setText("Oval");
        oval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalActionPerformed(evt);
            }
        });
        shapes.add(oval);

        MenuBar.add(shapes);

        info.setText("Info");
        info.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoMouseClicked(evt);
            }
        });
        MenuBar.add(info);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(shapePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(shapePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        initLineWidth();
        initColor();
    }//GEN-LAST:event_formWindowOpened

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        selectedForm = ShapeEnum.RECTANGLE;
    }//GEN-LAST:event_rectangleActionPerformed

    private void sqareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqareActionPerformed
        selectedForm = ShapeEnum.SQUARE;
    }//GEN-LAST:event_sqareActionPerformed

    private void rhombusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rhombusActionPerformed
        selectedForm = ShapeEnum.RHOMBUS;
    }//GEN-LAST:event_rhombusActionPerformed

    private void trapezeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trapezeActionPerformed
        selectedForm = ShapeEnum.TRAPEZE;
    }//GEN-LAST:event_trapezeActionPerformed

    private void polygonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_polygonActionPerformed
        selectedForm = ShapeEnum.POLYGON;
    }//GEN-LAST:event_polygonActionPerformed

    private void triangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleActionPerformed
        selectedForm = ShapeEnum.TRIANGLE;
    }//GEN-LAST:event_triangleActionPerformed

    private void hexagonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexagonActionPerformed
        selectedForm = ShapeEnum.HEXAGON;
    }//GEN-LAST:event_hexagonActionPerformed

    private void starActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starActionPerformed
        selectedForm = ShapeEnum.STAR;
    }//GEN-LAST:event_starActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        selectedForm = ShapeEnum.CIRCLE;
    }//GEN-LAST:event_circleActionPerformed

    private void ovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalActionPerformed
        selectedForm = ShapeEnum.OVAL;
    }//GEN-LAST:event_ovalActionPerformed

    private void shapePanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapePanelMouseClicked
        if (selectedForm != null) {
            Point p1 = shapePanel.getMousePosition();
            clicked.add(p1);
            if (clicked.size() == 2 || clicked.size() == 3 || clicked.size() == 4) {
                int width = clicked.get(1).x - clicked.get(0).x;
                int height = clicked.get(1).y - clicked.get(0).y;
                int x = clicked.get(0).x;
                int y = clicked.get(0).y;

                switch (selectedForm) {
                    case RECTANGLE:
                        shapePanel.addForm(new Rectangle(x, y, width, height, color, lineSize));
                        clicked.clear();
                        break;
                    case SQUARE:
                        shapePanel.addForm(new Square(x, y, width, color, lineSize));
                        clicked.clear();
                        break;
                    case RHOMBUS:
                        if (clicked.size() == 3){
                            int dist = clicked.get(2).x - clicked.get(1).x;
                            dist = Math.min(dist, 90);
                            dist = Math.max(dist, -90);
                            shapePanel.addForm(new Rhombus(x, y, width, 90 - dist, color, lineSize));
                            clicked.clear();
                        }

                        break;
                    case TRAPEZE:
                        if (clicked.size() == 3) {
                            int dist = clicked.get(2).x - clicked.get(1).x;
                            dist = Math.max(dist, -9);
                            dist = Math.min(dist, 10);
                            shapePanel.addForm(new Trapeze(x, y, width, -height, 90 - dist, color, lineSize));
                            clicked.clear();
                        }
                        break;
                    case POLYGON:
                        if (clicked.size() == 3) {
                            int dist = calcDistance(clicked.get(2), clicked.get(1), false);
                            dist /= 20;
                            shapePanel.addForm(new Polygon(x, y, width, 3 + dist, color, lineSize));
                            clicked.clear();
                        }
                        break;
                    case TRIANGLE:
                        if (clicked.size() == 2) {
                            shapePanel.addForm(new Triangle(x, y, -height, color, lineSize));
                            clicked.clear();
                        }
                        break;
                    case HEXAGON:
                        if (clicked.size() == 2) {
                            shapePanel.addForm(new Hexagon(x, y, height, color, lineSize));
                            clicked.clear();
                        }
                        break;
                    case STAR:
                        if (clicked.size() == 4) {
                            width = calcDistance(clicked.get(1), clicked.get(0), false);
                            int widthInner = calcDistance(clicked.get(2), clicked.get(0), false);
                            int corners = calcDistance(clicked.get(3), clicked.get(2), false);
                            corners /= 20;
                            corners = Math.max(4, corners);
                            shapePanel.addForm(new Star(x, y, width, widthInner, corners, color, lineSize));
                            clicked.clear();
                        }
                        break;
                    case CIRCLE:
                        int radius = calcDistance(clicked.get(0), clicked.get(1), false);
                        shapePanel.addForm(new Circle(x, y, radius, color, lineSize));
                        clicked.clear();
                        break;
                    case OVAL:
                        shapePanel.addForm(new Oval(x, y, width, height, color, lineSize));
                        clicked.clear();
                        break;
                }
                repaint();
            }
        }
    }//GEN-LAST:event_shapePanelMouseClicked

    private void shapePanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shapePanelMouseMoved
        Point currentHover = shapePanel.getMousePosition();
        if (clicked.size() == 1 || clicked.size() == 2 || clicked.size() == 3) {
            int x = clicked.get(0).x;
            int y = clicked.get(0).y;
            int width = currentHover.x - x;
            int height = currentHover.y - y;
            
            switch (selectedForm) {
                case RECTANGLE:
                    shapePanel.drawPreview(new Rectangle(x, y, width, height, color, lineSize));
                    break;
                case SQUARE:
                    shapePanel.drawPreview(new Square(x, y, width, color, lineSize));
                    break;
                case RHOMBUS:
                    if (clicked.size() == 1) {
                        shapePanel.drawPreview(new Rhombus(x, y, width, 90, color, lineSize));
                    } else if (clicked.size() == 2) {
                        width = clicked.get(1).x - x;
                        int angelShift = currentHover.x - clicked.get(1).x;
                        angelShift = Math.min(angelShift, 90);
                        angelShift = Math.max(angelShift, -90);
                        shapePanel.drawPreview(new Rhombus(x, y, width, 90 - angelShift, color, lineSize));
                    }
                    break;
                case TRAPEZE:
                    if (clicked.size() == 1) {
                        shapePanel.drawPreview(new Trapeze(x, y, width, -height, 90, color, lineSize));
                    } else if (clicked.size() == 2) {
                        height = clicked.get(1).y - y;
                        width = clicked.get(1).x - x;
                        int angelShift = currentHover.x - clicked.get(1).x;
                        angelShift = Math.max(angelShift, -9);
                        angelShift = Math.min(angelShift, 10);
                        shapePanel.drawPreview(new Trapeze(x, y, width, -height, 90 - angelShift, color, lineSize));
                    }
                    break;
                case POLYGON:
                    if (clicked.size() == 1) {
                        shapePanel.drawPreview(new Polygon(x, y, width, 3, color, lineSize));
                    } else if (clicked.size() == 2) {
                        width = clicked.get(1).x - x;
                        int addCorners = calcDistance(currentHover, clicked.get(1), false);
                        addCorners /= 20;
                        shapePanel.drawPreview(new Polygon(x, y, width, 3 + addCorners, color, lineSize));
                    }
                    break;
                case TRIANGLE:
                    if (clicked.size() == 1) {
                        shapePanel.drawPreview(new Triangle(x, y, -height, color, lineSize));
                    }
                    break;
                case HEXAGON:
                    shapePanel.drawPreview(new Hexagon(x, y, height, color, lineSize));
                    break;
                case STAR:
                    if (clicked.size() == 1) {
                        shapePanel.drawPreview(new Star(x, y, width, width, 20, color, lineSize));
                    } else if (clicked.size() == 2) {
                        int radius = calcDistance(clicked.get(1), clicked.get(0), false);
                        int radius2 = calcDistance(currentHover, clicked.get(0), false);
                        
                        shapePanel.drawPreview(new Star(x, y, radius, radius2, 4, color, lineSize));
                    } else if (clicked.size() == 3) {
                        int radius = calcDistance(clicked.get(1), clicked.get(0), false);
                        int radius2 = calcDistance(clicked.get(2), clicked.get(0), false);
                        int corners  = calcDistance(currentHover, clicked.get(2), false);
                        
                        corners /= 20;
                        corners = Math.max(4, corners);
                        shapePanel.drawPreview(new Star(x, y, radius, radius2, corners, color, lineSize));
                    }
                    break;
                case CIRCLE:
                    int radius = calcDistance(clicked.get(0), currentHover, false);
                    shapePanel.drawPreview(new Circle(x, y, radius, color, lineSize));
                    break;
                case OVAL:
                    shapePanel.drawPreview(new Oval(x, y, width, height, color, lineSize));
                    break;
            }
        }
        repaint();
    }//GEN-LAST:event_shapePanelMouseMoved

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        try {
            if (file == null) {
                JFileChooser fc = new JFileChooser();
                fc.showSaveDialog(this);
                file = fc.getSelectedFile();
            }
            shapePanel.Save(file);
        } catch (JAXBException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearMouseClicked
        shapePanel.clearFormen();
        repaint();
    }//GEN-LAST:event_clearMouseClicked

    private void saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsActionPerformed
        try {
            JFileChooser fc = new JFileChooser();
            fc.showSaveDialog(this);
            file = fc.getSelectedFile();
            shapePanel.Save(file);
        } catch (JAXBException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveAsActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        try {
            JFileChooser fc = new JFileChooser();
            fc.showOpenDialog(this);
            file = fc.getSelectedFile();
            shapePanel.Read(file);
        } catch (JAXBException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
    }//GEN-LAST:event_formKeyPressed

    private void infoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoMouseClicked
        infoDialog.setVisible(true);
    }//GEN-LAST:event_infoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem circle;
    private javax.swing.JMenu clear;
    private javax.swing.ButtonGroup colorButtongroup;
    private javax.swing.JMenu colors;
    private javax.swing.JMenuItem hexagon;
    private javax.swing.JMenu info;
    private javax.swing.JDialog infoDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu lineWidth;
    private javax.swing.ButtonGroup lineWidthButtongroup;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem oval;
    private javax.swing.JMenuItem polygon;
    private javax.swing.JMenuItem rectangle;
    private javax.swing.JMenuItem rhombus;
    private javax.swing.JMenuItem saveAs;
    private javax.swing.JMenuItem saveFile;
    private formen.ShapePanel shapePanel;
    private javax.swing.JMenu shapes;
    private javax.swing.JMenuItem sqare;
    private javax.swing.JMenuItem star;
    private javax.swing.JMenuItem trapeze;
    private javax.swing.JMenuItem triangle;
    // End of variables declaration//GEN-END:variables
     
            
    private void initLineWidth() {
        for (int i = 1; i <= 5; i++) {
            final JRadioButtonMenuItem button = new JRadioButtonMenuItem(i + "px");
            button.setActionCommand(i + "");
            button.setSelected((i == 1));
            button.addActionListener((ActionListener) (e) -> {
                lineSize = Integer.parseInt(button.getActionCommand());
            });
            lineWidthButtongroup.add(button);
            lineWidth.add(button);
        }
    }
    
    private void initColor() {
        String color = "";
        for (int i = 0; i < 6; i++) {
            switch (i) {
                case 0:
                    color = "Black";
                    break;
                case 1:
                    color = "Blue";
                    break;
                case 2:
                    color = "Green";
                    break;
                case 3:
                    color = "Yellow";
                    break;
                case 4:
                    color = "Orange";
                    break;
                case 5:
                    color = "Red";
                    break;
            }
            
            JRadioButtonMenuItem button = new JRadioButtonMenuItem(color);
            button.setSelected((i == 0));
            button.setActionCommand(color);
            button.addActionListener((ActionListener) (e) -> {
                switch (button.getActionCommand()) {
                    case "Blue":
                        this.color = Color.BLUE;
                        break;
                    case "Green":
                        this.color = Color.GREEN;
                        break;
                    case "Yellow":
                        this.color = Color.YELLOW;
                        break;
                    case "Orange":
                        this.color = Color.ORANGE;
                        break;
                    case "Red":
                        this.color = Color.RED;
                        break;
                    default:
                        this.color = Color.BLACK;
                }
            });
            colorButtongroup.add(button);
            colors.add(button);
        }
    }
    
    
    private int calcDistance(Point p1, Point p2, boolean isAbsolute) {
        int ret = (int) Math.sqrt((p2.y - p1.y) * (p2.y - p1.y) + (p2.x - p1.x) * (p2.x - p1.x));
        if (isAbsolute && (p2.x < p1.x || p2.y > p1.y)) {
            ret *= -1;
        }
        return ret;
    }
}
